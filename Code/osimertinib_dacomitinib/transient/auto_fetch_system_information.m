function [cfg]=auto_fetch_system_information()
% function [cfg]=auto_fetch_system_information() 
%  
% % DO NOT EDITED THIS FILE
% %
% % This function was automatically generated by 
% % build_system.pl       
% %
% % It takes no arguemnts and returns the data structure 'cfg' 
% %
% % cfg.parameters contains a data structure of parameter informaiton
% %                .names
% %                .values
% %                .lower_bound
% %                .upper_bound
% %                .units
% %                      
% %                      
% % cfg.options.mi
% %                 
% % Contains fields corresponding to 
% % state, parameter, and output names that are used to map named values to their indices
% % in matlab. For example, if your system had a state Dp and it was the third state, 
% % you could get this information in the following way:
%  
% mymap = auto_map; 
% mymap.states.Dp
%
% % similarly the indices for parameters kel and outputs Dtot are accessed in the following
% % way:
%  
%  mymap.parameters.kel
%  mymap.outputs.Dtot





%creating cell array of parameter information
p.matrix = [{'name'}          {'value'}  {'lb'}     {'ub'}     {'units'}       {'editable'}    {'type'}        {'ptype'}      
            {'kao'}           0.24        eps         inf         {'1/hour'}           {'yes'}              {'System'}           {'system'}          
            {'CL1o'}          11.76134    eps         inf         {'L/hour'}           {'yes'}              {'System'}           {'system'}          
            {'V1o'}           792.3074    eps         inf         {'L'}                {'yes'}              {'System'}           {'system'}          
            {'CL2o'}          22.57583    eps         inf         {'L/hour'}           {'yes'}              {'System'}           {'system'}          
            {'V2o'}           207         eps         inf         {'L'}                {'yes'}              {'System'}           {'system'}          
            {'MWo'}           500         eps         inf         {'kD'}               {'yes'}              {'System'}           {'system'}          
            {'kad'}           0.067       eps         inf         {'1/hour'}           {'yes'}              {'System'}           {'system'}          
            {'CLd'}           16.94379    eps         inf         {'L/hour'}           {'yes'}              {'System'}           {'system'}          
            {'V2d'}           899.371     eps         inf         {'L'}                {'yes'}              {'System'}           {'system'}          
            {'Qd'}            17.32       eps         inf         {'L/hour'}           {'yes'}              {'System'}           {'system'}          
            {'V3d'}           908.308     eps         inf         {'L'}                {'yes'}              {'System'}           {'system'}          
            {'MWd'}           469.945     eps         inf         {'kD'}               {'yes'}              {'System'}           {'system'}          ];



% pulling out the info in fields 
p.names       = p.matrix(2:end,1);
p.values      = cell2mat(p.matrix(2:end,2));
p.lower_bound = cell2mat(p.matrix(2:end,3));
p.upper_bound = cell2mat(p.matrix(2:end,4));
p.units       = p.matrix(2:end,5);
p.editable    = p.matrix(2:end,6);
p.type        = p.matrix(2:end,7);
p.ptype       = p.matrix(2:end,8);



 %mapping state indices
 m.states.Ato         = 1; 
 m.states.C1o         = 2; 
 m.states.C2o         = 3; 
 m.states.Atd         = 4; 
 m.states.C2d         = 5; 
 m.states.C3d         = 6; 



 %mapping parameter indices
 m.parameters.kao         = 1; 
 m.parameters.CL1o        = 2; 
 m.parameters.V1o         = 3; 
 m.parameters.CL2o        = 4; 
 m.parameters.V2o         = 5; 
 m.parameters.MWo         = 6; 
 m.parameters.kad         = 7; 
 m.parameters.CLd         = 8; 
 m.parameters.V2d         = 9; 
 m.parameters.Qd          = 10; 
 m.parameters.V3d         = 11; 
 m.parameters.MWd         = 12; 
 m.iiv.sets.default.ETAkao      = 1; 
 m.iiv.sets.default.ETACL1o     = 2; 
 m.iiv.sets.default.ETAV1o      = 3; 
 m.iiv.sets.default.ETACL2o     = 4; 
 m.iiv.sets.default.ETAV2o      = 5; 
 m.iiv.sets.default.ETACLd      = 6; 
 m.iiv.sets.default.ETAV2d      = 7; 
 m.iiv.sets.default.ETAkad      = 8; 
 m.iiv.sets.default.ETAQd       = 9; 
 m.iiv.sets.default.ETAV3d      = 10; 
 m.iivs = m.iiv.sets.default; 



 %mapping output indices
 m.outputs.C_osi       = 1; 
 m.outputs.C_osi_met   = 2; 
 m.outputs.C_daco_c    = 3; 
 m.outputs.C_daco_p    = 4; 



 %mapping paramter sets indices
 m.parameter_sets_reverse = [];
 m.parameter_sets_reverse = [m.parameter_sets_reverse {'default'}];
 m.parameter_sets.default= 1; 



% Adding bolus inputs
inputs.bolus.times.values = [ 0.0];
inputs.bolus.times.scale  = '1';
inputs.bolus.times.units  = 'hour';
inputs.bolus.species.C1o.values =  [ 0.0];
inputs.bolus.species.C1o.scale = '1e6/MWo/V1o';
inputs.bolus.species.C1o.units = 'mg/L';
inputs.bolus.species.C2o.values =  [ 0.0];
inputs.bolus.species.C2o.scale = '1e6/MWo/V2o';
inputs.bolus.species.C2o.units = 'mg/L';
inputs.bolus.species.C2d.values =  [ 0.0];
inputs.bolus.species.C2d.scale = '1e6/MWd/V2d';
inputs.bolus.species.C2d.units = 'mg/L';
inputs.bolus.species.C3d.values =  [ 0.0];
inputs.bolus.species.C3d.scale = '1e6/MWd/V3d';
inputs.bolus.species.C3d.units = 'mg/L';
inputs.bolus.species.Ato.values =  [80.0];
inputs.bolus.species.Ato.scale = '1e6/MWo';
inputs.bolus.species.Ato.units = 'mg';
inputs.bolus.species.Atd.values =  [45.0];
inputs.bolus.species.Atd.scale = '1e6/MWd';
inputs.bolus.species.Atd.units = 'mg';


% No infusion rates were specified


% No covariates were specified
misc.output_times = 'linspace(0, 10, (10-0)/.1)' ;
misc.amtify = 'HASH(0x7f8aae0eb1a8)' ;
misc.nonmem = 'HASH(0x7f8aae0eb0d0)' ;



%Dumping timescale information 
time_scales.hour         = 1; 
time_scales.days         = 1/24; 
time_scales.weeks        = 1/168; 
data = struct(); 



%Defining parameter sets
p.sets.default.values  = p.values;
p.sets.default.name      = 'default';



%Defining IIV information
iiv.sets.default.iivs.ETAkao.parameters        =['{kao}'];
iiv.sets.default.iivs.ETACL1o.parameters       =['{CL1o}'];
iiv.sets.default.iivs.ETAV1o.parameters        =['{V1o}'];
iiv.sets.default.iivs.ETACL2o.parameters       =['{CL2o}'];
iiv.sets.default.iivs.ETAV2o.parameters        =['{V2o}'];
iiv.sets.default.iivs.ETACLd.parameters        =['{CLd}'];
iiv.sets.default.iivs.ETAV2d.parameters        =['{V2d}'];
iiv.sets.default.iivs.ETAkad.parameters        =['{kad}'];
iiv.sets.default.iivs.ETAQd.parameters         =['{Qd}'];
iiv.sets.default.iivs.ETAV3d.parameters        =['{V3d}'];
iiv.sets.default.parameters.CL1o.iiv_name             = 'ETACL1o';
iiv.sets.default.parameters.CL1o.distribution         = 'LN';
iiv.sets.default.parameters.CL1o.equation             = 'SIMINT_PARAMETER_TV*exp(SIMINT_IIV_VALUE)';
iiv.sets.default.parameters.kao.iiv_name              = 'ETAkao';
iiv.sets.default.parameters.kao.distribution          = 'LN';
iiv.sets.default.parameters.kao.equation              = 'SIMINT_PARAMETER_TV*exp(SIMINT_IIV_VALUE)';
iiv.sets.default.parameters.V2d.iiv_name              = 'ETAV2d';
iiv.sets.default.parameters.V2d.distribution          = 'LN';
iiv.sets.default.parameters.V2d.equation              = 'SIMINT_PARAMETER_TV*exp(SIMINT_IIV_VALUE)';
iiv.sets.default.parameters.V2o.iiv_name              = 'ETAV2o';
iiv.sets.default.parameters.V2o.distribution          = 'LN';
iiv.sets.default.parameters.V2o.equation              = 'SIMINT_PARAMETER_TV*exp(SIMINT_IIV_VALUE)';
iiv.sets.default.parameters.V3d.iiv_name              = 'ETAV3d';
iiv.sets.default.parameters.V3d.distribution          = 'LN';
iiv.sets.default.parameters.V3d.equation              = 'SIMINT_PARAMETER_TV*exp(SIMINT_IIV_VALUE)';
iiv.sets.default.parameters.Qd.iiv_name               = 'ETAQd';
iiv.sets.default.parameters.Qd.distribution           = 'LN';
iiv.sets.default.parameters.Qd.equation               = 'SIMINT_PARAMETER_TV*exp(SIMINT_IIV_VALUE)';
iiv.sets.default.parameters.kad.iiv_name              = 'ETAkad';
iiv.sets.default.parameters.kad.distribution          = 'LN';
iiv.sets.default.parameters.kad.equation              = 'SIMINT_PARAMETER_TV*exp(SIMINT_IIV_VALUE)';
iiv.sets.default.parameters.CLd.iiv_name              = 'ETACLd';
iiv.sets.default.parameters.CLd.distribution          = 'LN';
iiv.sets.default.parameters.CLd.equation              = 'SIMINT_PARAMETER_TV*exp(SIMINT_IIV_VALUE)';
iiv.sets.default.parameters.CL2o.iiv_name             = 'ETACL2o';
iiv.sets.default.parameters.CL2o.distribution         = 'LN';
iiv.sets.default.parameters.CL2o.equation             = 'SIMINT_PARAMETER_TV*exp(SIMINT_IIV_VALUE)';
iiv.sets.default.parameters.V1o.iiv_name              = 'ETAV1o';
iiv.sets.default.parameters.V1o.distribution          = 'LN';
iiv.sets.default.parameters.V1o.equation              = 'SIMINT_PARAMETER_TV*exp(SIMINT_IIV_VALUE)';
iiv.sets.default.values = zeros(10,10);
iiv.sets.default.values(1, 1) =  0.7921;
iiv.sets.default.values(2, 2) =  0.2116;
iiv.sets.default.values(2, 4) =  0.215280000;
iiv.sets.default.values(2, 6) =  0.01476306;
iiv.sets.default.values(3, 3) =  0.2704;
iiv.sets.default.values(3, 7) =  0.1340652;
iiv.sets.default.values(4, 2) =  0.215280000;
iiv.sets.default.values(4, 4) =  0.2704;
iiv.sets.default.values(4, 9) =  0.008221922;
iiv.sets.default.values(5, 5) =  0.3844;
iiv.sets.default.values(5, 10) =  0.2223415;
iiv.sets.default.values(6, 2) =  0.01476306;
iiv.sets.default.values(6, 6) =  0.103;
iiv.sets.default.values(6, 9) =  0.035521120;
iiv.sets.default.values(7, 3) =  0.1340652;
iiv.sets.default.values(7, 7) =  0.092;
iiv.sets.default.values(8, 8) =  1.466;
iiv.sets.default.values(9, 4) =  0.008221922;
iiv.sets.default.values(9, 6) =  0.035521120;
iiv.sets.default.values(9, 9) =  0.025;
iiv.sets.default.values(10, 5) =  0.2223415;
iiv.sets.default.values(10, 10) =  0.178;
% Checking to make sure the variance/covariance  
% information makes sense 
if(min(eig((iiv.sets.default.values + iiv.sets.default.values')./2)) <=0)
  disp('Warning: IIV variance/covariance matrix is not')
  disp('positive semi-definiate, so it will not be possible')
  disp('to perform stochastic simulations with interaction')
  disp('for Parmaeter set default')
end
iiv.current_set = 'default'                  ;
iiv.iivs        = iiv.sets.default.iivs      ;
iiv.parameters  = iiv.sets.default.parameters;
iiv.values      = iiv.sets.default.values    ;



%Defining variance equations
% No variance equations defined
% See: <VE>
ve      = struct(); 



% Creating the cfg data structures
% basically pulling it all together
cfg.parameters      = p;
cfg.options.mi      = m; 
cfg.iiv             = iiv;
cfg.ve              = ve; 
cfg.data.default    = data; 
cfg.options.verbose = 'yes'; %defaulting to displaying information
if(exist('inputs', 'var'))
  cfg.options.inputs = inputs;
end

% default simulation options:
cfg.options.simulation_options.model_name             = 'ode_simulation';
cfg.options.simulation_options.default_simopts.Solver = 'ode23s';
cfg.options.simulation_options.output_times           = linspace(0,10,1000)';
cfg.options.simulation_options.integrate_with                  = 'm-file';
cfg.options.simulation_options.include_important_output_times  = 'yes';

% hidden option to control printing in simulations
cfg.options.simulation_options.logging  = 'yes';

cfg.options.logging.enabled   = 'yes';
cfg.options.logging.file      = sprintf('transient%subiquity_log.txt', filesep);
cfg.options.logging.timestamp = 'yes';
cfg.options.logging.ts_str    = 'yyyy-mm-dd HH:MM:SS';


%Defining the default stochastic options
cfg.options.stochastic.nsub    = 100;
cfg.options.stochastic.seed    = 8675309;
cfg.options.stochastic.ci      = 95;
cfg.options.stochastic.ponly   = false ;

% By default all states and outputs will be included
cfg.options.stochastic.states  = fieldnames(cfg.options.mi.states);
cfg.options.stochastic.outputs = fieldnames(cfg.options.mi.outputs);

% Defining an empty cohort data structure:
cfg.cohorts                  = struct();

% Defining the default estimation options
cfg.estimation.observation_function           = 'system_od_general';
cfg.estimation.effort                         = 1;
cfg.estimation.optimizer                      = 'fminsearch';
cfg.estimation.monitor.status_function        = 'estimation_status';
cfg.estimation.monitor.exit_when_stable       = 'no';
cfg.estimation.monitor.iteration_history      = 100;
cfg.estimation.monitor.slope_tolerance        = 0.001;
cfg = system_select_set(cfg, 'default');

if(exist('misc', 'var'))
  cfg.options.misc = misc;
else
  cfg.options.misc = {};
end

if(exist('initial_conditions', 'var'))
  cfg.options.initial_conditions = initial_conditions;
end

if(exist('time_scales', 'var'))
 cfg.options.time_scales = time_scales;
end


cfg.options.model_details = [{'# System Units:'}
{'#                '}
{'#   mass          [=] nmoles'}
{'#   volume        [=] L'}
{'#   concentration [=] nM'}
{'#   time          [=] hour'}
{'#'}
{'# #------------#'}
{'# | Parameters |'}
{'# #------------#'}
{'#'}
{'# System parameters'}
{'# Osimertinib'}
{'#name      	value       lower  upper    units   edit    grouping'}
{'#                       bound  bound'}
{''}];